generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  active            Boolean @default(true)
  userId            String  @db.ObjectId
  username          String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  onboarding    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  dashboardView String? @default("member")

  accounts    Account[]
  clubMembers ClubMembers[]
}

model Club {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  logo    String?
  website String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  inviteCode String @unique
  clubOwnerId String @db.ObjectId

  sport       String
  location    String
  privacy     String
  meetingDays String[]
  meetingTime String
  skillLevel  String
  ageGroup    String
  foundedDate DateTime?

  memberCount  Int?
  activeEvents Int?
  totalEvents  Int?

  clubMembers ClubMembers[]
  customStats ClubStat[]
  pricing     ClubPricing[]
}

model ClubMembers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  clubId    String   @db.ObjectId
  role      UserRole @default(USER)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([userId, clubId])
}

model ClubStat {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  clubId String  @db.ObjectId
  label  String
  value  String
  unit   String
  icon   String?

  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model ClubPricing {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  clubId   String @db.ObjectId
  interval String // "weekly", "monthly", "yearly"
  name     String
  price    Float

  club     Club                 @relation(fields: [clubId], references: [id], onDelete: Cascade)
  features ClubPricingFeature[]
}

model ClubPricingFeature {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  pricingId   String @db.ObjectId
  description String

  pricing ClubPricing @relation(fields: [pricingId], references: [id], onDelete: Cascade)
}
